create database joins_practice;
use joins_practice;

-- create department table  
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);

INSERT INTO Departments VALUES
(1, 'HR'),
(2, 'IT'),
(3, 'Finance'),
(4, 'Marketing');


-- create employees table  
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(50),
    DepartmentID INT,
    Salary INT,
    ManagerID INT
);

INSERT INTO Employees VALUES
(1, 'Alice', 1, 60000, NULL),
(2, 'Bob', 2, 75000, 1),
(3, 'Charlie', 2, 72000, 1),
(4, 'David', 3, 58000, 2),
(5, 'Eve', NULL, 50000, NULL);  -- No department

-- create customer table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(50)
);

INSERT INTO Customers VALUES
(1, 'John Doe'),
(2, 'Jane Smith'),
(3, 'Sam Wilson');
 
-- create orders table 
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE
);

INSERT INTO Orders VALUES
(101, 1, '2023-08-01'),
(102, 2, '2023-08-03'),
(103, 1, '2023-09-01');

--  create category table
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50)
);

INSERT INTO Categories VALUES
(1, 'Electronics'),
(2, 'Clothing');

-- create product table 

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    CategoryID INT,
    SupplierID INT
);

INSERT INTO Products VALUES
(1, 'Laptop', 1, 1),
(2, 'Shirt', 2, 2),
(3, 'Headphones', 1, NULL);  -- No supplier

-- create suppliers table 
CREATE TABLE Suppliers (
    SupplierID INT PRIMARY KEY,
    SupplierName VARCHAR(50)
);

INSERT INTO Suppliers VALUES
(1, 'Tech Corp'),
(2, 'Fashion House'),
(3, 'Gadget Supply');

-- create students table 
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    StudentName VARCHAR(50)
);

INSERT INTO Students VALUES
(1, 'Aman'),
(2, 'Neha'),
(3, 'Rahul');
 

-- create courses table 
CREATE TABLE Courses (
    CourseID INT PRIMARY KEY,
    CourseName VARCHAR(50)
);

INSERT INTO Courses VALUES
(1, 'Mathematics'),
(2, 'Science');

-- create entrollment table 

CREATE TABLE Enrollments (
    StudentID INT,
    CourseID INT
);

INSERT INTO Enrollments VALUES
(1, 1),
(2, 2),
(1, 2);

-- create projects table

CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    ProjectName VARCHAR(50)
);

INSERT INTO Projects VALUES
(1, 'ERP Migration'),
(2, 'Website Redesign');


-- create Employeeprojects table
CREATE TABLE EmployeeProject (
    EmployeeID INT,
    ProjectID INT
);

INSERT INTO EmployeeProject VALUES
(1, 1),
(2, 2);

show tables;

-- List all employees and their department names.
-- (Tables: Employees, Departments)

select * from employees;
select * from departments;

select * from employees e inner join departments d on e.departmentID = d.departmentID;

-- Get the names of employees who work under a specific manager.
-- (Tables: Employees with ManagerID pointing to another employee)

select e.name as employee_name, m.name as manager_name from employees e join employees m ON e.managerID = m.employeeID;


-- Find the orders along with customer names.
-- (Tables: Orders, Customers)

select o.orderID, o.orderDate, c.customerName from orders o inner join customers c ON o.customerID = c.customerID;

-- Show all products along with their category names.
-- (Tables: Products, Categories)

select p.ProductID, p.ProductName, p.supplierID, c.categoryName, c.categoryID from products p inner join categories c ON p.CategoryID = c.CategoryID;

-- Display students who are enrolled in courses.
-- (Tables: Students, Enrollments, Courses)

select s.studentName, c.courseName from students s inner join enrollments e inner join courses c ON c.courseID = e.courseID AND e.StudentID = s.studentID; 
-- 2nd way 
select s.studentName, c.courseName from students s inner join enrollments e ON e.StudentID = s.studentID inner join courses c ON c.courseID = e.courseID; 

-- List all customers even if they haven’t placed an order.

select * from customers c left join orders o on c.customerID = o.customerID; 

-- Find all employees and their project names. Include those who are not assigned to any project.

select 
e.employeeID, p.projectID, e.name, e.salary, p.projectName
from 
employees e Left Join employeeproject ep 
ON e.employeeID = ep.employeeID 
Left Join projects p 
ON p.projectID = ep.projectID;


-- Display all products and their suppliers, including products without a supplier.

select p.productName, s.supplierName from products p left join suppliers s on p.supplierID = s.supplierID;

-- List all suppliers and the products they supply. Show suppliers even if they don’t supply anything.

select s.supplierName, p.productName from suppliers s left join products p  on p.supplierID = s.supplierID;
-- VS 
select p.productName, s.supplierName from products p right join suppliers s on p.supplierID = s.supplierID;

-- Find all employees and their managers (show employees even if they don’t have a manager).

select e.name as employee_name, m.name as manager_name from employees e left join employees m ON e.managerID = m.employeeID;


-- List all pairs of students who share the same class.

select s1.studentName, s2.studentName, c.courseName
FROM 
    Enrollments e1
JOIN 
    Enrollments e2 ON e1.CourseID = e2.CourseID AND e1.StudentID < e2.StudentID

JOIN Students s1 ON e1.StudentID = s1.StudentID
JOIN Students s2 ON e2.StudentID = s2.StudentID
JOIN Courses c ON e1.CourseID = c.CourseID;


-- Get a list of all customers and orders, including those who haven’t ordered and orders without a matching customer.
-- (Use: FULL OUTER JOIN)


select c.customerName,c.customerID, o.orderID, o.orderDate
from 
customers c LEFT JOIN orders o 
ON c.customerID = o.customerID
union
select c.customerName, c.customerID, o.orderID, o.orderDate
from 
customers c right JOIN orders o 
ON c.customerID = o.customerID;


-- Get every combination of products and categories.
-- (Use: CROSS JOIN)

select * from products cross join categories;

-- Find employees who do not have any assigned projects.
-- (Use: LEFT JOIN with WHERE project IS NULL)

select e.name 
from employees e 
left join employeeproject ep 
on e.employeeID = ep.employeeID 
Left join projects p 
on ep.projectID = p.projectID where p.projectName IS Null;

-- Challenge Yourself
-- Find customers who have placed more than one order and list their most recent order date.

select c.customerName, count(o.customerID) as place_count 
from customers c
join orders o 
on c.customerID = o.customerID
group by c.customerName, o.customerID
having place_count > 1;
  
-- Find departments that have no employees.
select d.departmentName, e.name
from departments d
left join employees e 
on d.departmentID = e.departmentID
where e.departmentID IS Null;

-- Show employees who earn more than their manager.

select e.name as employee_name, m.name as manager_name, e.salary emp_Sal, m.salary man_sal
from employees e JOIN employees m 
ON e.managerID = m.employeeID where e.salary > m.salary;


-- Get product names and total quantities ordered. Show products even if they have never been ordered.

CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    Quantity INT
);

INSERT INTO OrderDetails (OrderID, ProductID, Quantity) VALUES
(1001, 1, 2),
(1002, 2, 1),
(1003, 1, 3);

select p.productName, count(od.productID) as quan_count 
from products p 
left join orderdetails od 
ON p.productID = od.productID
group by p.productName, od.productID
having quan_count > -1;

-- List all employees along with their department and project details.

select e.name, d.departmentName, p.projectName 
from
employees e 
left join departments d on e.departmentID = d.departmentID 
left join employeeproject ep on e.employeeID = ep.employeeID
left join projects p on ep.projectID = p.projectID;

-- Find the average salary of employees in each department. Show departments even if no employee exists.

select d.departmentName, avg(e.salary) as AVG_SALARY
from departments d
left join employees e
on d.departmentID = e.departmentID 
group by d.departmentName;





























